#!/usr/bin/ruby
# encoding: utf-8
# (c) 2011 Martin Koz√°k (martinkozak@martinkozak.net)

$:.push("./lib")
$:.unshift("./lib")

require "unified-queues"
require "riot"
  
context "Single: Array (from Ruby STL)" do
    setup do
        UnifiedQueues::Single::new(Array)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo)
        topic.push(:bar)
        topic.pop == :foo and topic.pop == :bar
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: Queue (from Ruby STL)" do
    setup do
        require "thread"
        UnifiedQueues::Single::new(Queue)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo)
        topic.push(:bar)
        topic.pop == :foo and topic.pop == :bar
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: Containers::Heap (from 'algorithms')" do
    setup do
        require "algorithms"
        UnifiedQueues::Single::new(Containers::Heap)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo, 2)
        topic.push(:bar, 1)
        topic.pop == :bar and topic.pop == :foo
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: Depq (from 'depq')" do
    setup do
        require "depq"
        UnifiedQueues::Single::new(Depq)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo, 2)
        topic.push(:bar, 1)
        topic.pop == :bar and topic.pop == :foo
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: EventedQueue (from 'evented-queue')" do
    setup do
        require "evented-queue"
        UnifiedQueues::Single::new(EventedQueue)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo)
        topic.push(:bar)
        topic.pop == :foo and topic.pop == :bar
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: CPriorityQueue (from 'priority_queue')" do
    setup do
        require "priority_queue/c_priority_queue"
        UnifiedQueues::Single::new(CPriorityQueue)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo, 2)
        topic.push(:bar, 1)
        topic.pop == :bar and topic.pop == :foo
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: PoorPriorityQueue (from 'priority_queue')" do
    setup do
        require "priority_queue/poor_priority_queue"
        UnifiedQueues::Single::new(PoorPriorityQueue)
    end
    
    asserts("#clear!") do
        topic.push(:foo)
        topic.clear!
        topic.pop.nil?
    end
    asserts("#pop") do
        topic.push(:foo, 2)
        topic.push(:bar, 1)
        topic.pop == :bar and topic.pop == :foo
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

context "Single: RubyPriorityQueue (from 'priority_queue')" do
    setup do
        require "priority_queue/ruby_priority_queue"
        UnifiedQueues::Single::new(RubyPriorityQueue)
    end
    
    asserts("#clear!") do
        initial = topic.empty?
        topic.push(:foo)
        topic.clear!
        after = topic.empty?
        initial and after
    end
    asserts("#empty?") do
        initial = topic.empty?
        topic.push(:foo)
        after = topic.empty?
        topic.pop
        initial and not after
    end
    asserts("#length") do
        initial = topic.length
        topic.push(:foo)
        after = topic.length
        topic.pop
        initial == 0 and after == 1
    end
    asserts("#pop") do
        topic.push(:foo, 2)
        topic.push(:bar, 1)
        topic.pop == :bar and topic.pop == :foo
    end
    asserts("#push") do
        topic.push(:foo)
        topic.pop == :foo
    end
end

